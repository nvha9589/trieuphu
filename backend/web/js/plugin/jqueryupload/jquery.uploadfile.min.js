(function (e) { if (e.fn.ajaxForm == undefined) { e.getScript("http://malsup.github.io/jquery.form.js") } var t = {}; t.fileapi = e("<input type='file'/>").get(0).files !== undefined; t.formdata = window.FormData !== undefined; e.fn.uploadFile = function (n) { function a() { if (r.afterUploadAll && !u) { u = true; (function e() { if (s.sCounter != 0 && s.sCounter + s.fCounter == s.tCounter) { r.afterUploadAll(s); u = false } else window.setTimeout(e, 100) })() } } function f(t, n, r) { r.on("dragenter", function (t) { t.stopPropagation(); t.preventDefault(); e(this).css("border", "2px solid #A5A5C7") }); r.on("dragover", function (e) { e.stopPropagation(); e.preventDefault() }); r.on("drop", function (r) { e(this).css("border", "2px dotted #A5A5C7"); r.preventDefault(); t.errorLog.html(""); var i = r.originalEvent.dataTransfer.files; if (!n.multiple && i.length > 1) { if (n.showError) e("<div style='color:red;'>" + n.multiDragErrorStr + "</div>").appendTo(t.errorLog); return } if (n.onSelect(i) == false) return; h(n, t, i) }); e(document).on("dragenter", function (e) { e.stopPropagation(); e.preventDefault() }); e(document).on("dragover", function (e) { e.stopPropagation(); e.preventDefault(); r.css("border", "2px dotted #A5A5C7") }); e(document).on("drop", function (e) { e.stopPropagation(); e.preventDefault(); r.css("border", "2px dotted #A5A5C7") }) } function l(e) { var t = ""; var n = e / 1024; if (parseInt(n) > 1024) { var r = n / 1024; t = r.toFixed(2) + " MB" } else { t = n.toFixed(2) + " KB" } return t } function c(t) { var n = []; if (jQuery.type(t) == "string") { n = t.split("&") } else { n = e.param(t).split("&") } var r = n.length; var i = []; var s, o; for (s = 0; s < r; s++) { n[s] = n[s].replace(/\+/g, " "); o = n[s].split("="); i.push([decodeURIComponent(o[0]), decodeURIComponent(o[1])]) } return i } function h(t, n, r) { for (var i = 0; i < r.length; i++) { if (!p(n, t, r[i].name)) { if (t.showError) e("<div style='color:red;'><b>" + r[i].name + "</b> " + t.extErrorStr + t.allowedTypes + "</div>").appendTo(n.errorLog); continue } if (t.maxFileSize != -1 && r[i].size > t.maxFileSize) { if (t.showError) e("<div style='color:red;'><b>" + r[i].name + "</b> " + t.sizeErrorStr + l(t.maxFileSize) + "</div>").appendTo(n.errorLog); continue } var s = t; var o = new FormData; var u = t.fileName.replace("[]", ""); o.append(u, r[i]); var a = t.formData; if (a) { var f = c(a); for (var h = 0; h < f.length; h++) { if (f[h]) { o.append(f[h][0], f[h][1]) } } } s.fileData = o; var d = new v(n, t); var g = ""; if (t.showFileCounter) g = n.fileCounter + t.fileCounterStyle + r[i].name; else g = r[i].name; d.filename.html(g); var y = e("<form style='display:block; position:absolute;left: 150px;' class='" + n.formGroup + "' method='" + t.method + "' action='" + t.url + "' enctype='" + t.enctype + "'></form>"); y.appendTo("body"); var b = []; b.push(r[i].name); m(y, s, d, b, n); n.fileCounter++ } } function p(e, t, n) { var r = t.allowedTypes.toLowerCase().split(","); var i = n.split(".").pop().toLowerCase(); if (t.allowedTypes != "*" && jQuery.inArray(i, r) < 0) { return false } return true } function d(n, r, i, s) { var o = "ajax-upload-id-" + (new Date).getTime(); var u = e("<form method='" + i.method + "' action='" + i.url + "' enctype='" + i.enctype + "'></form>"); var a = "<input type='file' id='" + o + "' name='" + i.fileName + "'/>"; if (i.multiple) { if (i.fileName.indexOf("[]") != i.fileName.length - 2) { i.fileName += "[]" } a = "<input type='file' id='" + o + "' name='" + i.fileName + "' multiple/>" } var f = e(a).appendTo(u); f.change(function () { n.errorLog.html(""); var o = i.allowedTypes.toLowerCase().split(","); var a = []; if (this.files) { for (y = 0; y < this.files.length; y++) { a.push(this.files[y].name) } if (i.onSelect(this.files) == false) return } else { var f = e(this).val(); var l = []; a.push(f); if (!p(n, i, f)) { if (i.showError) e("<div style='color:red;'><b>" + f + "</b> " + i.extErrorStr + i.allowedTypes + "</div>").appendTo(n.errorLog); return } l.push({ name: f, size: "NA" }); if (i.onSelect(l) == false) return } s.unbind("click"); u.hide(); d(n, r, i, s); u.addClass(r); if (t.fileapi && t.formdata) { u.removeClass(r); var c = this.files; h(i, n, c) } else { var g = ""; for (var y = 0; y < a.length; y++) { if (i.showFileCounter) g += n.fileCounter + i.fileCounterStyle + a[y] + "<br>"; else g += a[y] + "<br>"; n.fileCounter++ } var b = new v(n, i); b.filename.html(g); m(u, i, b, a, n) } }); u.css({ margin: 0, padding: 0 }); var l = e(s).width() + 10; if (l == 10) l = 120; var c = s.height() + 10; if (c == 10) c = 35; s.css({ position: "relative", overflow: "hidden", cursor: "default" }); s.attr("class", "uploadsbtn"); f.css({ position: "absolute", cursor: "pointer", top: "0px", width: l, height: c, left: "0px", "z-index": "100", opacity: "0.0", filter: "alpha(opacity=0)", "-ms-filter": "alpha(opacity=0)", "-khtml-opacity": "0.0", "-moz-opacity": "0.0" }); u.appendTo(s) } function v(t, n) { this.statusbar = e("<div class='ajax-file-upload-statusbar'></div>"); this.filename = e("<div class='ajax-file-upload-filename'></div>").appendTo(this.statusbar); this.progressDiv = e("<div class='ajax-file-upload-progress'>").appendTo(this.statusbar).hide(); this.progressbar = e("<div class='ajax-file-upload-bar " + t.formGroup + "'></div>").appendTo(this.progressDiv); this.abort = e("<div class='ajax-file-upload-red " + t.formGroup + "'>" + n.abortStr + "</div>").appendTo(this.statusbar).hide(); this.cancel = e("<div class='ajax-file-upload-red'>" + n.cancelStr + "</div>").appendTo(this.statusbar).hide(); this.start = e("<div class='ajax-file-upload-green'>" + n.startStr + "</div>").appendTo(this.statusbar).hide(); this.done = e("<div class='ajax-file-upload-green'>" + n.doneStr + "</div>").appendTo(this.statusbar).hide(); this.del = e("<div class='ajax-file-upload-red'>" + n.deletelStr + "</div>").appendTo(this.statusbar).hide(); t.errorLog.after(this.statusbar); return this } function m(e, n, r, i, s) { var o = null; var u = { cache: false, contentType: false, processData: false, forceSync: false, data: n.formData, formData: n.fileData, dataType: n.returnType, beforeSubmit: function (t, o, u) { if (n.onSubmit.call(this, i) != false) { var f = n.dynamicFormData(); if (f) { var l = c(f); if (l) { for (var h = 0; h < l.length; h++) { if (l[h]) { if (n.fileData != undefined) u.formData.append(l[h][0], l[h][1]); else u.data[l[h][0]] = l[h][1] } } } } s.tCounter += i.length; a(); return true } r.statusbar.append("<div style='color:red;'>" + n.uploadErrorStr + "</div>"); r.cancel.show(); e.remove(); r.cancel.click(function () { r.statusbar.remove() }); return false }, beforeSend: function (e, i) { r.progressDiv.show(); r.cancel.hide(); r.done.hide(); if (n.showAbort) { r.abort.show(); r.abort.click(function () { e.abort() }) } if (!t.formdata) { r.progressbar.width("5%") } else r.progressbar.width("1%") }, uploadProgress: function (e, t, i, s) { if (s > 98) s = 98; var o = s + "%"; if (s > 1) r.progressbar.width(o); if (n.showProgress) { r.progressbar.html(o); r.progressbar.css("text-align", "center") } }, success: function (t, o, u) { s.responses.push(t); r.progressbar.width("100%"); if (n.showProgress) { r.progressbar.html("100%"); r.progressbar.css("text-align", "center") } r.abort.hide(); n.onSuccess.call(this, i, t, u); if (n.showStatusAfterSuccess) { if (n.showDone) { r.done.show(); r.done.click(function () { r.statusbar.hide("slow"); r.statusbar.remove() }) } else { r.done.hide() } if (n.showDelete) { r.del.show(); r.del.click(function () { if (n.deleteCallback) n.deleteCallback.call(this, t, r) }) } else { r.del.hide() } } else { r.statusbar.hide("slow"); r.statusbar.remove() } e.remove(); s.sCounter += i.length }, error: function (t, o, u) { r.abort.hide(); if (t.statusText == "abort") { r.statusbar.hide("slow") } else { n.onError.call(this, i, o, u); if (n.showStatusAfterError) { r.progressDiv.hide(); r.statusbar.append("<span style='color:red;'>ERROR: " + u + "</span>") } else { r.statusbar.hide(); r.statusbar.remove() } } e.remove(); s.fCounter += i.length } }; if (n.autoSubmit) { e.ajaxSubmit(u) } else { if (n.showCancel) { r.cancel.show(); r.cancel.click(function () { e.remove(); r.statusbar.remove() }); r.start.show(); r.start.click(function () { r.start.hide(); e.ajaxSubmit(u) }) } e.ajaxForm(u) } } var r = e.extend({ url: "", method: "POST", enctype: "multipart/form-data", formData: null, returnType: null, allowedTypes: "*", fileName: "file", formData: {}, dynamicFormData: function () { return {} }, maxFileSize: -1, multiple: true, dragDrop: true, autoSubmit: true, showCancel: true, showAbort: true, showDone: true, showDelete: false, showError: true, showStatusAfterSuccess: true, showStatusAfterError: true, showFileCounter: true, fileCounterStyle: "). ", showProgress: false, onSelect: function (e) { return true }, onSubmit: function (e, t) { }, onSuccess: function (e, t, n) { }, onError: function (e, t, n) { }, deleteCallback: false, afterUploadAll: false, uploadButtonClass: "ajax-file-upload", dragDropStr: "<span><b>Drag & Drop Files</b></span>", abortStr: "Abort", cancelStr: "Cancel", deletelStr: "Delete", doneStr: "Done", startStr: "Start", multiDragErrorStr: "Multiple File Drag & Drop is not allowed.", extErrorStr: "is not allowed. Allowed extensions: ", sizeErrorStr: "is not allowed. Allowed Max size: ", uploadErrorStr: "Upload is not allowed" }, n); this.fileCounter = 1; this.fCounter = 0; this.sCounter = 0; this.tCounter = 0; var i = "ajax-file-upload-" + (new Date).getTime(); this.formGroup = i; this.hide(); this.errorLog = e("<div></div>"); this.after(this.errorLog); this.responses = []; if (!t.formdata) { r.dragDrop = false } var s = this; var o = e("<div>" + e(this).html() + "</div>"); e(o).addClass(r.uploadButtonClass); (function g() { if (e.fn.ajaxForm) { if (r.dragDrop) { var t = e('<div class="ajax-upload-dragdrop" style="vertical-align:top;"></div>'); e(s).before(t); e(t).append(o); e(t).append(e(r.dragDropStr)); f(s, r, t) } else { e(s).before(o) } d(s, i, r, o) } else window.setTimeout(g, 10) })(); this.startUpload = function () { e("." + this.formGroup).each(function (t, n) { if (e(this).is("form")) e(this).submit() }) }; this.stopUpload = function () { e(".ajax-file-upload-red").each(function (t, n) { if (e(this).hasClass(s.formGroup)) e(this).click() }) }; this.getResponses = function () { return this.responses }; var u = false; return this } })(jQuery)